
Задача: 
Имеется база данных (MySQL или Postgre), в которой поминутно накапливается информация об использовании абонентами условного оператора связи ABC услуги доступа в Интернет. Необходимо разработать приложение, которое будет заполнять таблицы этой базы случайными значениями объемов скачанной абонентами информации в байтах. Приложение на входе должно получать количество уникальных абонентов, временной интервал в формате дата_время_начала-дата_время_окончания, а также параметры коннекта к базе данных. На выходе приложение должно создавать структуру БД со всеми необходимыми таблицами и заполнять их случайными значениями в соответствии с описанием выше. Структуру таблиц, формат имени абонента, порядок величины скачиваемой абонентом за минуту информации, а также любые другие параметры, не описанные явно в задании, выберите на свое усмотрение.



Краткое описание программы ABCTraffic:

Данное приложение написано на Java с использованием следующих технологий: Maven, Jpa, Hibernate. 
Приложение позволяет ежеминутно вносить статистику использования интернет-траффика абонентами. 

1. Настройки программы
Настройки программы регулируются файлом config.properties - в нем указывается количество пользователей, период, 
за который будет сгенерирована статистика а также настройки Базы Данных. 
Важно! Программа генерирует статистику в настоящем времени. Необходимо указывать период с датой окончания в будущем! Если дата начала уже прошла, то заполнение базы данных начнется сразу после старта программы.


2. Запуск программы
При запуске программы будет считана информация из конфигурационного файла, внесены соответсвующие данные в настройки Hibernate.
После этого будет создана таблица subscriber в БД (если она еще не была создана) и в ней будет сделано соответствующее параметру unique_subscribers число записей.
При этом для каждого объекта будет создана задача, выполнение которой произойдет в заданное файлом время.

3. Выполнение задач.
После создания сущностей в БД Для каждого абонента будет запущен свой поток, в котором с минутным 
интервалом будет генерироваться информация о траффике. Для снижения нагрузки на базу, используется объект класса Semaphore, который регулирует максимальное кол-во обращений к базе.

4. Остановка приложения. 
Если время окончания, указанное в файле еще не наступило, то после повторного запуска приложения выполнение задачи продолжится.
  
 